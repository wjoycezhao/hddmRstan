// Generated by rstantools.  Do not edit by hand.

/*
    hddmRstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hddmRstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hddmRstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_hddm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_hddm");
    reader.add_event(162, 160, "end", "model_hddm");
    return reader;
}
#include <stan_meta_header.hpp>
class model_hddm
  : public stan::model::model_base_crtp<model_hddm> {
private:
        int N;
        int S;
        std::vector<int> subj;
        int Kv;
        int Kz;
        int Ka;
        int Kt;
        std::vector<double> rt;
        std::vector<int> resp;
        matrix_d a_x;
        matrix_d t_x;
        matrix_d v_x;
        matrix_d z_x;
        std::vector<int> subj_start;
        std::vector<int> subj_end;
public:
    model_hddm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_hddm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_hddm_namespace::model_hddm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("subj", "N", N);
            context__.validate_dims("data initialization", "subj", "int", context__.to_vec(N));
            subj = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("subj");
            pos__ = 0;
            size_t subj_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < subj_k_0_max__; ++k_0__) {
                subj[k_0__] = vals_i__[pos__++];
            }
            size_t subj_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < subj_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subj[i_0__]", subj[i_0__], 0);
                check_less_or_equal(function__, "subj[i_0__]", subj[i_0__], S);
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Kv", "int", context__.to_vec());
            Kv = int(0);
            vals_i__ = context__.vals_i("Kv");
            pos__ = 0;
            Kv = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "Kz", "int", context__.to_vec());
            Kz = int(0);
            vals_i__ = context__.vals_i("Kz");
            pos__ = 0;
            Kz = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "Ka", "int", context__.to_vec());
            Ka = int(0);
            vals_i__ = context__.vals_i("Ka");
            pos__ = 0;
            Ka = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "Kt", "int", context__.to_vec());
            Kt = int(0);
            vals_i__ = context__.vals_i("Kt");
            pos__ = 0;
            Kt = vals_i__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("rt", "N", N);
            context__.validate_dims("data initialization", "rt", "double", context__.to_vec(N));
            rt = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("rt");
            pos__ = 0;
            size_t rt_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rt_k_0_max__; ++k_0__) {
                rt[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("resp", "N", N);
            context__.validate_dims("data initialization", "resp", "int", context__.to_vec(N));
            resp = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("resp");
            pos__ = 0;
            size_t resp_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < resp_k_0_max__; ++k_0__) {
                resp[k_0__] = vals_i__[pos__++];
            }
            size_t resp_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < resp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "resp[i_0__]", resp[i_0__], 0);
                check_less_or_equal(function__, "resp[i_0__]", resp[i_0__], 1);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("a_x", "Ka", Ka);
            validate_non_negative_index("a_x", "N", N);
            context__.validate_dims("data initialization", "a_x", "matrix_d", context__.to_vec(Ka,N));
            a_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Ka, N);
            vals_r__ = context__.vals_r("a_x");
            pos__ = 0;
            size_t a_x_j_2_max__ = N;
            size_t a_x_j_1_max__ = Ka;
            for (size_t j_2__ = 0; j_2__ < a_x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_x_j_1_max__; ++j_1__) {
                    a_x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("t_x", "Kt", Kt);
            validate_non_negative_index("t_x", "N", N);
            context__.validate_dims("data initialization", "t_x", "matrix_d", context__.to_vec(Kt,N));
            t_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kt, N);
            vals_r__ = context__.vals_r("t_x");
            pos__ = 0;
            size_t t_x_j_2_max__ = N;
            size_t t_x_j_1_max__ = Kt;
            for (size_t j_2__ = 0; j_2__ < t_x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < t_x_j_1_max__; ++j_1__) {
                    t_x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("v_x", "Kv", Kv);
            validate_non_negative_index("v_x", "N", N);
            context__.validate_dims("data initialization", "v_x", "matrix_d", context__.to_vec(Kv,N));
            v_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kv, N);
            vals_r__ = context__.vals_r("v_x");
            pos__ = 0;
            size_t v_x_j_2_max__ = N;
            size_t v_x_j_1_max__ = Kv;
            for (size_t j_2__ = 0; j_2__ < v_x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < v_x_j_1_max__; ++j_1__) {
                    v_x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("z_x", "Kz", Kz);
            validate_non_negative_index("z_x", "N", N);
            context__.validate_dims("data initialization", "z_x", "matrix_d", context__.to_vec(Kz,N));
            z_x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kz, N);
            vals_r__ = context__.vals_r("z_x");
            pos__ = 0;
            size_t z_x_j_2_max__ = N;
            size_t z_x_j_1_max__ = Kz;
            for (size_t j_2__ = 0; j_2__ < z_x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_x_j_1_max__; ++j_1__) {
                    z_x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("subj_start", "S", S);
            context__.validate_dims("data initialization", "subj_start", "int", context__.to_vec(S));
            subj_start = std::vector<int>(S, int(0));
            vals_i__ = context__.vals_i("subj_start");
            pos__ = 0;
            size_t subj_start_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < subj_start_k_0_max__; ++k_0__) {
                subj_start[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("subj_end", "S", S);
            context__.validate_dims("data initialization", "subj_end", "int", context__.to_vec(S));
            subj_end = std::vector<int>(S, int(0));
            vals_i__ = context__.vals_i("subj_end");
            pos__ = 0;
            size_t subj_end_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < subj_end_k_0_max__; ++k_0__) {
                subj_end[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 26;
            validate_non_negative_index("a_beta_mu", "Ka", Ka);
            num_params_r__ += Ka;
            current_statement_begin__ = 27;
            validate_non_negative_index("a_beta_sd", "Ka", Ka);
            num_params_r__ += Ka;
            current_statement_begin__ = 29;
            validate_non_negative_index("t_beta_mu_raw", "Kt", Kt);
            validate_non_negative_index("t_beta_mu_raw", "1", 1);
            num_params_r__ += (Kt * 1);
            current_statement_begin__ = 30;
            validate_non_negative_index("t_beta_sd", "Kt", Kt);
            num_params_r__ += Kt;
            current_statement_begin__ = 32;
            validate_non_negative_index("z_beta_mu", "Kz", Kz);
            num_params_r__ += Kz;
            current_statement_begin__ = 33;
            validate_non_negative_index("z_beta_sd", "Kz", Kz);
            num_params_r__ += Kz;
            current_statement_begin__ = 35;
            validate_non_negative_index("v_beta_mu", "Kv", Kv);
            num_params_r__ += Kv;
            current_statement_begin__ = 36;
            validate_non_negative_index("v_beta_sd", "Kv", Kv);
            num_params_r__ += Kv;
            current_statement_begin__ = 39;
            validate_non_negative_index("a_beta_raw", "Ka", Ka);
            validate_non_negative_index("a_beta_raw", "S", S);
            num_params_r__ += (Ka * S);
            current_statement_begin__ = 40;
            validate_non_negative_index("t_beta_raw", "Kt", Kt);
            validate_non_negative_index("t_beta_raw", "S", S);
            num_params_r__ += (Kt * S);
            current_statement_begin__ = 41;
            validate_non_negative_index("z_beta_raw", "Kz", Kz);
            validate_non_negative_index("z_beta_raw", "S", S);
            num_params_r__ += (Kz * S);
            current_statement_begin__ = 42;
            validate_non_negative_index("v_beta_raw", "Kv", Kv);
            validate_non_negative_index("v_beta_raw", "S", S);
            num_params_r__ += (Kv * S);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_hddm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 26;
        if (!(context__.contains_r("a_beta_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_beta_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_beta_mu");
        pos__ = 0U;
        validate_non_negative_index("a_beta_mu", "Ka", Ka);
        context__.validate_dims("parameter initialization", "a_beta_mu", "vector_d", context__.to_vec(Ka));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a_beta_mu(Ka);
        size_t a_beta_mu_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_mu_j_1_max__; ++j_1__) {
            a_beta_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(a_beta_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_beta_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("a_beta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_beta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_beta_sd");
        pos__ = 0U;
        validate_non_negative_index("a_beta_sd", "Ka", Ka);
        context__.validate_dims("parameter initialization", "a_beta_sd", "vector_d", context__.to_vec(Ka));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a_beta_sd(Ka);
        size_t a_beta_sd_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_sd_j_1_max__; ++j_1__) {
            a_beta_sd(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, a_beta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_beta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("t_beta_mu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_beta_mu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_beta_mu_raw");
        pos__ = 0U;
        validate_non_negative_index("t_beta_mu_raw", "Kt", Kt);
        validate_non_negative_index("t_beta_mu_raw", "1", 1);
        context__.validate_dims("parameter initialization", "t_beta_mu_raw", "matrix_d", context__.to_vec(Kt,1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> t_beta_mu_raw(Kt, 1);
        size_t t_beta_mu_raw_j_2_max__ = 1;
        size_t t_beta_mu_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_mu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_raw_j_1_max__; ++j_1__) {
                t_beta_mu_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(t_beta_mu_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_beta_mu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("t_beta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_beta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_beta_sd");
        pos__ = 0U;
        validate_non_negative_index("t_beta_sd", "Kt", Kt);
        context__.validate_dims("parameter initialization", "t_beta_sd", "vector_d", context__.to_vec(Kt));
        Eigen::Matrix<double, Eigen::Dynamic, 1> t_beta_sd(Kt);
        size_t t_beta_sd_j_1_max__ = Kt;
        for (size_t j_1__ = 0; j_1__ < t_beta_sd_j_1_max__; ++j_1__) {
            t_beta_sd(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, t_beta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_beta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("z_beta_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_beta_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_beta_mu");
        pos__ = 0U;
        validate_non_negative_index("z_beta_mu", "Kz", Kz);
        context__.validate_dims("parameter initialization", "z_beta_mu", "vector_d", context__.to_vec(Kz));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_beta_mu(Kz);
        size_t z_beta_mu_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_mu_j_1_max__; ++j_1__) {
            z_beta_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z_beta_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_beta_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("z_beta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_beta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_beta_sd");
        pos__ = 0U;
        validate_non_negative_index("z_beta_sd", "Kz", Kz);
        context__.validate_dims("parameter initialization", "z_beta_sd", "vector_d", context__.to_vec(Kz));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_beta_sd(Kz);
        size_t z_beta_sd_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_sd_j_1_max__; ++j_1__) {
            z_beta_sd(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, z_beta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_beta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("v_beta_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_beta_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_beta_mu");
        pos__ = 0U;
        validate_non_negative_index("v_beta_mu", "Kv", Kv);
        context__.validate_dims("parameter initialization", "v_beta_mu", "vector_d", context__.to_vec(Kv));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_beta_mu(Kv);
        size_t v_beta_mu_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_mu_j_1_max__; ++j_1__) {
            v_beta_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(v_beta_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_beta_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("v_beta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_beta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_beta_sd");
        pos__ = 0U;
        validate_non_negative_index("v_beta_sd", "Kv", Kv);
        context__.validate_dims("parameter initialization", "v_beta_sd", "vector_d", context__.to_vec(Kv));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_beta_sd(Kv);
        size_t v_beta_sd_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_sd_j_1_max__; ++j_1__) {
            v_beta_sd(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, v_beta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_beta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("a_beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_beta_raw");
        pos__ = 0U;
        validate_non_negative_index("a_beta_raw", "Ka", Ka);
        validate_non_negative_index("a_beta_raw", "S", S);
        context__.validate_dims("parameter initialization", "a_beta_raw", "matrix_d", context__.to_vec(Ka,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_beta_raw(Ka, S);
        size_t a_beta_raw_j_2_max__ = S;
        size_t a_beta_raw_j_1_max__ = Ka;
        for (size_t j_2__ = 0; j_2__ < a_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_beta_raw_j_1_max__; ++j_1__) {
                a_beta_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(a_beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("t_beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_beta_raw");
        pos__ = 0U;
        validate_non_negative_index("t_beta_raw", "Kt", Kt);
        validate_non_negative_index("t_beta_raw", "S", S);
        context__.validate_dims("parameter initialization", "t_beta_raw", "matrix_d", context__.to_vec(Kt,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> t_beta_raw(Kt, S);
        size_t t_beta_raw_j_2_max__ = S;
        size_t t_beta_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_raw_j_1_max__; ++j_1__) {
                t_beta_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(t_beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("z_beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_beta_raw");
        pos__ = 0U;
        validate_non_negative_index("z_beta_raw", "Kz", Kz);
        validate_non_negative_index("z_beta_raw", "S", S);
        context__.validate_dims("parameter initialization", "z_beta_raw", "matrix_d", context__.to_vec(Kz,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_beta_raw(Kz, S);
        size_t z_beta_raw_j_2_max__ = S;
        size_t z_beta_raw_j_1_max__ = Kz;
        for (size_t j_2__ = 0; j_2__ < z_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_beta_raw_j_1_max__; ++j_1__) {
                z_beta_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("v_beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_beta_raw");
        pos__ = 0U;
        validate_non_negative_index("v_beta_raw", "Kv", Kv);
        validate_non_negative_index("v_beta_raw", "S", S);
        context__.validate_dims("parameter initialization", "v_beta_raw", "matrix_d", context__.to_vec(Kv,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> v_beta_raw(Kv, S);
        size_t v_beta_raw_j_2_max__ = S;
        size_t v_beta_raw_j_1_max__ = Kv;
        for (size_t j_2__ = 0; j_2__ < v_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < v_beta_raw_j_1_max__; ++j_1__) {
                v_beta_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(v_beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a_beta_mu;
            (void) a_beta_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                a_beta_mu = in__.vector_constrain(Ka, lp__);
            else
                a_beta_mu = in__.vector_constrain(Ka);
            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a_beta_sd;
            (void) a_beta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                a_beta_sd = in__.vector_lb_constrain(0, Ka, lp__);
            else
                a_beta_sd = in__.vector_lb_constrain(0, Ka);
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> t_beta_mu_raw;
            (void) t_beta_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                t_beta_mu_raw = in__.matrix_constrain(Kt, 1, lp__);
            else
                t_beta_mu_raw = in__.matrix_constrain(Kt, 1);
            current_statement_begin__ = 30;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t_beta_sd;
            (void) t_beta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                t_beta_sd = in__.vector_lb_constrain(0, Kt, lp__);
            else
                t_beta_sd = in__.vector_lb_constrain(0, Kt);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_beta_mu;
            (void) z_beta_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                z_beta_mu = in__.vector_constrain(Kz, lp__);
            else
                z_beta_mu = in__.vector_constrain(Kz);
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_beta_sd;
            (void) z_beta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                z_beta_sd = in__.vector_lb_constrain(0, Kz, lp__);
            else
                z_beta_sd = in__.vector_lb_constrain(0, Kz);
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_beta_mu;
            (void) v_beta_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                v_beta_mu = in__.vector_constrain(Kv, lp__);
            else
                v_beta_mu = in__.vector_constrain(Kv);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_beta_sd;
            (void) v_beta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                v_beta_sd = in__.vector_lb_constrain(0, Kv, lp__);
            else
                v_beta_sd = in__.vector_lb_constrain(0, Kv);
            current_statement_begin__ = 39;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a_beta_raw;
            (void) a_beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                a_beta_raw = in__.matrix_constrain(Ka, S, lp__);
            else
                a_beta_raw = in__.matrix_constrain(Ka, S);
            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> t_beta_raw;
            (void) t_beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                t_beta_raw = in__.matrix_constrain(Kt, S, lp__);
            else
                t_beta_raw = in__.matrix_constrain(Kt, S);
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_beta_raw;
            (void) z_beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                z_beta_raw = in__.matrix_constrain(Kz, S, lp__);
            else
                z_beta_raw = in__.matrix_constrain(Kz, S);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v_beta_raw;
            (void) v_beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                v_beta_raw = in__.matrix_constrain(Kv, S, lp__);
            else
                v_beta_raw = in__.matrix_constrain(Kv, S);
            // transformed parameters
            current_statement_begin__ = 47;
            validate_non_negative_index("t_beta_mu", "Kt", Kt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t_beta_mu(Kt);
            stan::math::initialize(t_beta_mu, DUMMY_VAR__);
            stan::math::fill(t_beta_mu, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("a_beta", "Ka", Ka);
            validate_non_negative_index("a_beta", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> a_beta(Ka, S);
            stan::math::initialize(a_beta, DUMMY_VAR__);
            stan::math::fill(a_beta, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("t_beta", "Kt", Kt);
            validate_non_negative_index("t_beta", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> t_beta(Kt, S);
            stan::math::initialize(t_beta, DUMMY_VAR__);
            stan::math::fill(t_beta, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("z_beta", "Kz", Kz);
            validate_non_negative_index("z_beta", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_beta(Kz, S);
            stan::math::initialize(z_beta, DUMMY_VAR__);
            stan::math::fill(z_beta, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("v_beta", "Kv", Kv);
            validate_non_negative_index("v_beta", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v_beta(Kv, S);
            stan::math::initialize(v_beta, DUMMY_VAR__);
            stan::math::fill(v_beta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 52;
            stan::math::assign(t_beta_mu, to_vector(t_beta_mu_raw));
            current_statement_begin__ = 53;
            stan::math::assign(a_beta, add(rep_matrix(a_beta_mu, S), diag_pre_multiply(a_beta_sd, a_beta_raw)));
            current_statement_begin__ = 54;
            stan::math::assign(t_beta, add(rep_matrix(t_beta_mu, S), diag_pre_multiply(t_beta_sd, t_beta_raw)));
            current_statement_begin__ = 55;
            stan::math::assign(v_beta, add(rep_matrix(v_beta_mu, S), diag_pre_multiply(v_beta_sd, v_beta_raw)));
            current_statement_begin__ = 56;
            stan::math::assign(z_beta, add(rep_matrix(z_beta_mu, S), diag_pre_multiply(z_beta_sd, z_beta_raw)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 47;
            size_t t_beta_mu_j_1_max__ = Kt;
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(t_beta_mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: t_beta_mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable t_beta_mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 48;
            size_t a_beta_j_1_max__ = Ka;
            size_t a_beta_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < a_beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < a_beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(a_beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: a_beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable a_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 49;
            size_t t_beta_j_1_max__ = Kt;
            size_t t_beta_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < t_beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < t_beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(t_beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: t_beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable t_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 50;
            size_t z_beta_j_1_max__ = Kz;
            size_t z_beta_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < z_beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < z_beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(z_beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z_beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable z_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 51;
            size_t v_beta_j_1_max__ = Kv;
            size_t v_beta_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < v_beta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < v_beta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(v_beta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: v_beta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable v_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 61;
            validate_non_negative_index("a", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(N);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("t", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t(N);
            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("v", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(N);
            stan::math::initialize(v, DUMMY_VAR__);
            stan::math::fill(v, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("z", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(N);
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);
            current_statement_begin__ = 66;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 67;
                stan::model::assign(a, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(transpose(multiply(transpose(stan::model::rvalue(a_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "a_beta")), stan::model::rvalue(a_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "a_x")))), 
                            "assigning variable a");
                current_statement_begin__ = 68;
                stan::model::assign(t, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(transpose(multiply(transpose(stan::model::rvalue(t_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "t_beta")), stan::model::rvalue(t_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "t_x")))), 
                            "assigning variable t");
                current_statement_begin__ = 69;
                stan::model::assign(v, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            transpose(multiply(transpose(stan::model::rvalue(v_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "v_beta")), stan::model::rvalue(v_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "v_x"))), 
                            "assigning variable v");
                current_statement_begin__ = 70;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            inv_logit(transpose(multiply(transpose(stan::model::rvalue(z_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "z_beta")), stan::model::rvalue(z_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "z_x")))), 
                            "assigning variable z");
            }
            current_statement_begin__ = 76;
            lp_accum__.add(std_normal_log<propto__>(a_beta_mu));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(get_base1(t_beta_mu, 1, "t_beta_mu", 1), -(1), 0.4));
            current_statement_begin__ = 79;
            if (as_bool(logical_gt(Kt, 1))) {
                current_statement_begin__ = 79;
                lp_accum__.add(std_normal_log<propto__>(stan::model::rvalue(t_beta_mu, stan::model::cons_list(stan::model::index_min_max(2, Kt), stan::model::nil_index_list()), "t_beta_mu")));
            }
            current_statement_begin__ = 81;
            lp_accum__.add(std_normal_log<propto__>(z_beta_mu));
            current_statement_begin__ = 83;
            lp_accum__.add(std_normal_log<propto__>(v_beta_mu));
            current_statement_begin__ = 86;
            for (int i = 1; i <= Ka; ++i) {
                current_statement_begin__ = 86;
                lp_accum__.add(normal_log<propto__>(get_base1(a_beta_sd, i, "a_beta_sd", 1), 0, 1));
                if (get_base1(a_beta_sd, i, "a_beta_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 87;
            for (int i = 1; i <= Kt; ++i) {
                current_statement_begin__ = 87;
                lp_accum__.add(normal_log<propto__>(get_base1(t_beta_sd, i, "t_beta_sd", 1), 0, 1));
                if (get_base1(t_beta_sd, i, "t_beta_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 88;
            for (int i = 1; i <= Kz; ++i) {
                current_statement_begin__ = 88;
                lp_accum__.add(normal_log<propto__>(get_base1(z_beta_sd, i, "z_beta_sd", 1), 0, 1));
                if (get_base1(z_beta_sd, i, "z_beta_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 89;
            for (int i = 1; i <= Kv; ++i) {
                current_statement_begin__ = 89;
                lp_accum__.add(normal_log<propto__>(get_base1(v_beta_sd, i, "v_beta_sd", 1), 0, 1));
                if (get_base1(v_beta_sd, i, "v_beta_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 92;
            for (int i = 1; i <= Ka; ++i) {
                current_statement_begin__ = 92;
                lp_accum__.add(std_normal_log<propto__>(get_base1(a_beta_raw, i, "a_beta_raw", 1)));
            }
            current_statement_begin__ = 93;
            for (int i = 1; i <= Kt; ++i) {
                current_statement_begin__ = 93;
                lp_accum__.add(std_normal_log<propto__>(get_base1(t_beta_raw, i, "t_beta_raw", 1)));
            }
            current_statement_begin__ = 94;
            for (int i = 1; i <= Kz; ++i) {
                current_statement_begin__ = 94;
                lp_accum__.add(std_normal_log<propto__>(get_base1(z_beta_raw, i, "z_beta_raw", 1)));
            }
            current_statement_begin__ = 95;
            for (int i = 1; i <= Kv; ++i) {
                current_statement_begin__ = 95;
                lp_accum__.add(std_normal_log<propto__>(get_base1(v_beta_raw, i, "v_beta_raw", 1)));
            }
            current_statement_begin__ = 98;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 99;
                if (as_bool(logical_eq(get_base1(resp, n, "resp", 1), 1))) {
                    current_statement_begin__ = 100;
                    lp_accum__.add(wiener_log(get_base1(rt, n, "rt", 1), get_base1(a, n, "a", 1), get_base1(t, n, "t", 1), get_base1(z, n, "z", 1), get_base1(v, n, "v", 1)));
                } else {
                    current_statement_begin__ = 103;
                    lp_accum__.add(wiener_log(get_base1(rt, n, "rt", 1), get_base1(a, n, "a", 1), get_base1(t, n, "t", 1), (1 - get_base1(z, n, "z", 1)), -(get_base1(v, n, "v", 1))));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a_beta_mu");
        names__.push_back("a_beta_sd");
        names__.push_back("t_beta_mu_raw");
        names__.push_back("t_beta_sd");
        names__.push_back("z_beta_mu");
        names__.push_back("z_beta_sd");
        names__.push_back("v_beta_mu");
        names__.push_back("v_beta_sd");
        names__.push_back("a_beta_raw");
        names__.push_back("t_beta_raw");
        names__.push_back("z_beta_raw");
        names__.push_back("v_beta_raw");
        names__.push_back("t_beta_mu");
        names__.push_back("a_beta");
        names__.push_back("t_beta");
        names__.push_back("z_beta");
        names__.push_back("v_beta");
        names__.push_back("a_mean_subj");
        names__.push_back("t_mean_subj");
        names__.push_back("v_mean_subj");
        names__.push_back("z_mean_subj");
        names__.push_back("a_mean_grand");
        names__.push_back("t_mean_grand");
        names__.push_back("v_mean_grand");
        names__.push_back("z_mean_grand");
        names__.push_back("log_lik");
        names__.push_back("dev");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Ka);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ka);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kt);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kz);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kz);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kv);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kv);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ka);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kt);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kz);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kv);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ka);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kt);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kz);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kv);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_hddm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> a_beta_mu = in__.vector_constrain(Ka);
        size_t a_beta_mu_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_mu_j_1_max__; ++j_1__) {
            vars__.push_back(a_beta_mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> a_beta_sd = in__.vector_lb_constrain(0, Ka);
        size_t a_beta_sd_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_sd_j_1_max__; ++j_1__) {
            vars__.push_back(a_beta_sd(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> t_beta_mu_raw = in__.matrix_constrain(Kt, 1);
        size_t t_beta_mu_raw_j_2_max__ = 1;
        size_t t_beta_mu_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_mu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_raw_j_1_max__; ++j_1__) {
                vars__.push_back(t_beta_mu_raw(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> t_beta_sd = in__.vector_lb_constrain(0, Kt);
        size_t t_beta_sd_j_1_max__ = Kt;
        for (size_t j_1__ = 0; j_1__ < t_beta_sd_j_1_max__; ++j_1__) {
            vars__.push_back(t_beta_sd(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_beta_mu = in__.vector_constrain(Kz);
        size_t z_beta_mu_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_mu_j_1_max__; ++j_1__) {
            vars__.push_back(z_beta_mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_beta_sd = in__.vector_lb_constrain(0, Kz);
        size_t z_beta_sd_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_sd_j_1_max__; ++j_1__) {
            vars__.push_back(z_beta_sd(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_beta_mu = in__.vector_constrain(Kv);
        size_t v_beta_mu_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_mu_j_1_max__; ++j_1__) {
            vars__.push_back(v_beta_mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_beta_sd = in__.vector_lb_constrain(0, Kv);
        size_t v_beta_sd_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_sd_j_1_max__; ++j_1__) {
            vars__.push_back(v_beta_sd(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_beta_raw = in__.matrix_constrain(Ka, S);
        size_t a_beta_raw_j_2_max__ = S;
        size_t a_beta_raw_j_1_max__ = Ka;
        for (size_t j_2__ = 0; j_2__ < a_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_beta_raw_j_1_max__; ++j_1__) {
                vars__.push_back(a_beta_raw(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> t_beta_raw = in__.matrix_constrain(Kt, S);
        size_t t_beta_raw_j_2_max__ = S;
        size_t t_beta_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_raw_j_1_max__; ++j_1__) {
                vars__.push_back(t_beta_raw(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_beta_raw = in__.matrix_constrain(Kz, S);
        size_t z_beta_raw_j_2_max__ = S;
        size_t z_beta_raw_j_1_max__ = Kz;
        for (size_t j_2__ = 0; j_2__ < z_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_beta_raw_j_1_max__; ++j_1__) {
                vars__.push_back(z_beta_raw(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> v_beta_raw = in__.matrix_constrain(Kv, S);
        size_t v_beta_raw_j_2_max__ = S;
        size_t v_beta_raw_j_1_max__ = Kv;
        for (size_t j_2__ = 0; j_2__ < v_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < v_beta_raw_j_1_max__; ++j_1__) {
                vars__.push_back(v_beta_raw(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 47;
            validate_non_negative_index("t_beta_mu", "Kt", Kt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> t_beta_mu(Kt);
            stan::math::initialize(t_beta_mu, DUMMY_VAR__);
            stan::math::fill(t_beta_mu, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("a_beta", "Ka", Ka);
            validate_non_negative_index("a_beta", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> a_beta(Ka, S);
            stan::math::initialize(a_beta, DUMMY_VAR__);
            stan::math::fill(a_beta, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("t_beta", "Kt", Kt);
            validate_non_negative_index("t_beta", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> t_beta(Kt, S);
            stan::math::initialize(t_beta, DUMMY_VAR__);
            stan::math::fill(t_beta, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("z_beta", "Kz", Kz);
            validate_non_negative_index("z_beta", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_beta(Kz, S);
            stan::math::initialize(z_beta, DUMMY_VAR__);
            stan::math::fill(z_beta, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("v_beta", "Kv", Kv);
            validate_non_negative_index("v_beta", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> v_beta(Kv, S);
            stan::math::initialize(v_beta, DUMMY_VAR__);
            stan::math::fill(v_beta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 52;
            stan::math::assign(t_beta_mu, to_vector(t_beta_mu_raw));
            current_statement_begin__ = 53;
            stan::math::assign(a_beta, add(rep_matrix(a_beta_mu, S), diag_pre_multiply(a_beta_sd, a_beta_raw)));
            current_statement_begin__ = 54;
            stan::math::assign(t_beta, add(rep_matrix(t_beta_mu, S), diag_pre_multiply(t_beta_sd, t_beta_raw)));
            current_statement_begin__ = 55;
            stan::math::assign(v_beta, add(rep_matrix(v_beta_mu, S), diag_pre_multiply(v_beta_sd, v_beta_raw)));
            current_statement_begin__ = 56;
            stan::math::assign(z_beta, add(rep_matrix(z_beta_mu, S), diag_pre_multiply(z_beta_sd, z_beta_raw)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t t_beta_mu_j_1_max__ = Kt;
                for (size_t j_1__ = 0; j_1__ < t_beta_mu_j_1_max__; ++j_1__) {
                    vars__.push_back(t_beta_mu(j_1__));
                }
                size_t a_beta_j_2_max__ = S;
                size_t a_beta_j_1_max__ = Ka;
                for (size_t j_2__ = 0; j_2__ < a_beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < a_beta_j_1_max__; ++j_1__) {
                        vars__.push_back(a_beta(j_1__, j_2__));
                    }
                }
                size_t t_beta_j_2_max__ = S;
                size_t t_beta_j_1_max__ = Kt;
                for (size_t j_2__ = 0; j_2__ < t_beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < t_beta_j_1_max__; ++j_1__) {
                        vars__.push_back(t_beta(j_1__, j_2__));
                    }
                }
                size_t z_beta_j_2_max__ = S;
                size_t z_beta_j_1_max__ = Kz;
                for (size_t j_2__ = 0; j_2__ < z_beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < z_beta_j_1_max__; ++j_1__) {
                        vars__.push_back(z_beta(j_1__, j_2__));
                    }
                }
                size_t v_beta_j_2_max__ = S;
                size_t v_beta_j_1_max__ = Kv;
                for (size_t j_2__ = 0; j_2__ < v_beta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < v_beta_j_1_max__; ++j_1__) {
                        vars__.push_back(v_beta(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 109;
            validate_non_negative_index("a_mean_subj", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> a_mean_subj(S);
            stan::math::initialize(a_mean_subj, DUMMY_VAR__);
            stan::math::fill(a_mean_subj, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("t_mean_subj", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> t_mean_subj(S);
            stan::math::initialize(t_mean_subj, DUMMY_VAR__);
            stan::math::fill(t_mean_subj, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("v_mean_subj", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> v_mean_subj(S);
            stan::math::initialize(v_mean_subj, DUMMY_VAR__);
            stan::math::fill(v_mean_subj, DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("z_mean_subj", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> z_mean_subj(S);
            stan::math::initialize(z_mean_subj, DUMMY_VAR__);
            stan::math::fill(z_mean_subj, DUMMY_VAR__);
            current_statement_begin__ = 113;
            double a_mean_grand;
            (void) a_mean_grand;  // dummy to suppress unused var warning
            stan::math::initialize(a_mean_grand, DUMMY_VAR__);
            stan::math::fill(a_mean_grand, DUMMY_VAR__);
            current_statement_begin__ = 114;
            double t_mean_grand;
            (void) t_mean_grand;  // dummy to suppress unused var warning
            stan::math::initialize(t_mean_grand, DUMMY_VAR__);
            stan::math::fill(t_mean_grand, DUMMY_VAR__);
            current_statement_begin__ = 115;
            double v_mean_grand;
            (void) v_mean_grand;  // dummy to suppress unused var warning
            stan::math::initialize(v_mean_grand, DUMMY_VAR__);
            stan::math::fill(v_mean_grand, DUMMY_VAR__);
            current_statement_begin__ = 116;
            double z_mean_grand;
            (void) z_mean_grand;  // dummy to suppress unused var warning
            stan::math::initialize(z_mean_grand, DUMMY_VAR__);
            stan::math::fill(z_mean_grand, DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 119;
            double dev;
            (void) dev;  // dummy to suppress unused var warning
            stan::math::initialize(dev, DUMMY_VAR__);
            stan::math::fill(dev, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 124;
            validate_non_negative_index("a", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(N);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("t", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t(N);
            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("v", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v(N);
            stan::math::initialize(v, DUMMY_VAR__);
            stan::math::fill(v, DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("z", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(N);
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);
            current_statement_begin__ = 129;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 130;
                stan::model::assign(a, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(transpose(multiply(transpose(stan::model::rvalue(a_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "a_beta")), stan::model::rvalue(a_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "a_x")))), 
                            "assigning variable a");
                current_statement_begin__ = 131;
                stan::model::assign(t, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(transpose(multiply(transpose(stan::model::rvalue(t_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "t_beta")), stan::model::rvalue(t_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "t_x")))), 
                            "assigning variable t");
                current_statement_begin__ = 132;
                stan::model::assign(v, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            transpose(multiply(transpose(stan::model::rvalue(v_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "v_beta")), stan::model::rvalue(v_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "v_x"))), 
                            "assigning variable v");
                current_statement_begin__ = 133;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), 
                            inv_logit(transpose(multiply(transpose(stan::model::rvalue(z_beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "z_beta")), stan::model::rvalue(z_x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list())), "z_x")))), 
                            "assigning variable z");
            }
            current_statement_begin__ = 136;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 137;
                stan::model::assign(a_mean_subj, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(a, stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), "a")), 
                            "assigning variable a_mean_subj");
                current_statement_begin__ = 138;
                stan::model::assign(t_mean_subj, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), "t")), 
                            "assigning variable t_mean_subj");
                current_statement_begin__ = 139;
                stan::model::assign(z_mean_subj, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(z, stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), "z")), 
                            "assigning variable z_mean_subj");
                current_statement_begin__ = 140;
                stan::model::assign(v_mean_subj, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(v, stan::model::cons_list(stan::model::index_min_max(get_base1(subj_start, s, "subj_start", 1), get_base1(subj_end, s, "subj_end", 1)), stan::model::nil_index_list()), "v")), 
                            "assigning variable v_mean_subj");
            }
            current_statement_begin__ = 143;
            stan::math::assign(a_mean_grand, mean(a_mean_subj));
            current_statement_begin__ = 144;
            stan::math::assign(t_mean_grand, mean(t_mean_subj));
            current_statement_begin__ = 145;
            stan::math::assign(z_mean_grand, mean(z_mean_subj));
            current_statement_begin__ = 146;
            stan::math::assign(v_mean_grand, mean(v_mean_subj));
            current_statement_begin__ = 149;
            stan::math::assign(dev, 0);
            current_statement_begin__ = 150;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 151;
                if (as_bool(logical_eq(get_base1(resp, n, "resp", 1), 1))) {
                    current_statement_begin__ = 152;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                wiener_log(get_base1(rt, n, "rt", 1), get_base1(a, n, "a", 1), get_base1(t, n, "t", 1), get_base1(z, n, "z", 1), get_base1(v, n, "v", 1)), 
                                "assigning variable log_lik");
                } else {
                    current_statement_begin__ = 155;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                wiener_log(get_base1(rt, n, "rt", 1), get_base1(a, n, "a", 1), get_base1(t, n, "t", 1), (1 - get_base1(z, n, "z", 1)), -(get_base1(v, n, "v", 1))), 
                                "assigning variable log_lik");
                }
                current_statement_begin__ = 157;
                stan::math::assign(dev, (dev - (2 * get_base1(log_lik, n, "log_lik", 1))));
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 109;
            size_t a_mean_subj_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < a_mean_subj_j_1_max__; ++j_1__) {
                vars__.push_back(a_mean_subj(j_1__));
            }
            current_statement_begin__ = 110;
            size_t t_mean_subj_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < t_mean_subj_j_1_max__; ++j_1__) {
                vars__.push_back(t_mean_subj(j_1__));
            }
            current_statement_begin__ = 111;
            size_t v_mean_subj_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < v_mean_subj_j_1_max__; ++j_1__) {
                vars__.push_back(v_mean_subj(j_1__));
            }
            current_statement_begin__ = 112;
            size_t z_mean_subj_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < z_mean_subj_j_1_max__; ++j_1__) {
                vars__.push_back(z_mean_subj(j_1__));
            }
            current_statement_begin__ = 113;
            vars__.push_back(a_mean_grand);
            current_statement_begin__ = 114;
            vars__.push_back(t_mean_grand);
            current_statement_begin__ = 115;
            vars__.push_back(v_mean_grand);
            current_statement_begin__ = 116;
            vars__.push_back(z_mean_grand);
            current_statement_begin__ = 118;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 119;
            vars__.push_back(dev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_hddm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_beta_mu_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_beta_sd_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_beta_mu_raw_j_2_max__ = 1;
        size_t t_beta_mu_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_mu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_mu_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_beta_sd_j_1_max__ = Kt;
        for (size_t j_1__ = 0; j_1__ < t_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_beta_mu_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_beta_sd_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_beta_mu_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_beta_sd_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_beta_raw_j_2_max__ = S;
        size_t a_beta_raw_j_1_max__ = Ka;
        for (size_t j_2__ = 0; j_2__ < a_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_beta_raw_j_2_max__ = S;
        size_t t_beta_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_beta_raw_j_2_max__ = S;
        size_t z_beta_raw_j_1_max__ = Kz;
        for (size_t j_2__ = 0; j_2__ < z_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t v_beta_raw_j_2_max__ = S;
        size_t v_beta_raw_j_1_max__ = Kv;
        for (size_t j_2__ = 0; j_2__ < v_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < v_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "v_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t t_beta_mu_j_1_max__ = Kt;
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_beta_j_2_max__ = S;
            size_t a_beta_j_1_max__ = Ka;
            for (size_t j_2__ = 0; j_2__ < a_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t t_beta_j_2_max__ = S;
            size_t t_beta_j_1_max__ = Kt;
            for (size_t j_2__ = 0; j_2__ < t_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < t_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "t_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t z_beta_j_2_max__ = S;
            size_t z_beta_j_1_max__ = Kz;
            for (size_t j_2__ = 0; j_2__ < z_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t v_beta_j_2_max__ = S;
            size_t v_beta_j_1_max__ = Kv;
            for (size_t j_2__ = 0; j_2__ < v_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < v_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t a_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < a_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < t_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < v_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < z_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "z_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a_beta_mu_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_beta_sd_j_1_max__ = Ka;
        for (size_t j_1__ = 0; j_1__ < a_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_beta_mu_raw_j_2_max__ = 1;
        size_t t_beta_mu_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_mu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_mu_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_beta_sd_j_1_max__ = Kt;
        for (size_t j_1__ = 0; j_1__ < t_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_beta_mu_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_beta_sd_j_1_max__ = Kz;
        for (size_t j_1__ = 0; j_1__ < z_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_beta_mu_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_beta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_beta_sd_j_1_max__ = Kv;
        for (size_t j_1__ = 0; j_1__ < v_beta_sd_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_beta_sd" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_beta_raw_j_2_max__ = S;
        size_t a_beta_raw_j_1_max__ = Ka;
        for (size_t j_2__ = 0; j_2__ < a_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < a_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_beta_raw_j_2_max__ = S;
        size_t t_beta_raw_j_1_max__ = Kt;
        for (size_t j_2__ = 0; j_2__ < t_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < t_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_beta_raw_j_2_max__ = S;
        size_t z_beta_raw_j_1_max__ = Kz;
        for (size_t j_2__ = 0; j_2__ < z_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t v_beta_raw_j_2_max__ = S;
        size_t v_beta_raw_j_1_max__ = Kv;
        for (size_t j_2__ = 0; j_2__ < v_beta_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < v_beta_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "v_beta_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t t_beta_mu_j_1_max__ = Kt;
            for (size_t j_1__ = 0; j_1__ < t_beta_mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_beta_mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t a_beta_j_2_max__ = S;
            size_t a_beta_j_1_max__ = Ka;
            for (size_t j_2__ = 0; j_2__ < a_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < a_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "a_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t t_beta_j_2_max__ = S;
            size_t t_beta_j_1_max__ = Kt;
            for (size_t j_2__ = 0; j_2__ < t_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < t_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "t_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t z_beta_j_2_max__ = S;
            size_t z_beta_j_1_max__ = Kz;
            for (size_t j_2__ = 0; j_2__ < z_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t v_beta_j_2_max__ = S;
            size_t v_beta_j_1_max__ = Kv;
            for (size_t j_2__ = 0; j_2__ < v_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < v_beta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v_beta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t a_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < a_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < t_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < v_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_mean_subj_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < z_mean_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_mean_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "z_mean_grand";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_hddm_namespace::model_hddm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
